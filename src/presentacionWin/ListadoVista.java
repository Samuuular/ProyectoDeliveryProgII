/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package presentacionWin;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.table.DefaultTableModel;
import logicaNegocio.Cliente;
import logicaNegocio.Comida;
import logicaNegocio.Ingrediente;
import logicaNegocio.Logica;
import logicaNegocio.Pedido;
import logicaNegocio.Receta;
import logicaNegocio.SeccionCocina;

/**
 *
 * @author EduPiry
 */
public class ListadoVista extends javax.swing.JInternalFrame {

    private DefaultTableModel modeloComidas = new DefaultTableModel();
    private DefaultTableModel modeloClientes = new DefaultTableModel();
    private DefaultTableModel modeloIngredientes = new DefaultTableModel();
    private DefaultTableModel modeloPedidos = new DefaultTableModel();
    private DefaultTableModel modeloRecetas = new DefaultTableModel();
    private DefaultTableModel modeloSecciones = new DefaultTableModel();
    private Logica logicaTabla;
    protected List<Comida> susComidas=null;
    protected List<Ingrediente> susIngredientes = null;
    protected List<Receta> susRecetasDependientes = null;
    protected List<Receta> susRecetasPendientes = null;
    protected List<Comida> agregarComidas;
    protected List<Receta> agregarRecetas;
    protected Receta agregarUnaReceta;
    protected List<Ingrediente> agregarIngredientes;
    /**
     * Creates new form ListaClienteVista
     */
    public ListadoVista(Logica logicaDatos) {
        initComponents();
        logicaTabla = logicaDatos;
        agregarUnaReceta = new Receta();
        agregarComidas = new ArrayList();
        agregarRecetas = new ArrayList();
        agregarIngredientes = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRegistros = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        buscador1 = new javax.swing.JTextField();
        filtroComidas = new javax.swing.JRadioButton();
        filtroClientes = new javax.swing.JRadioButton();
        filtroIngredientes = new javax.swing.JRadioButton();
        filtroPedidos = new javax.swing.JRadioButton();
        filtroRecetas = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        buscador2 = new javax.swing.JTextField();
        filtroSecciones = new javax.swing.JRadioButton();
        botonSusComidas = new javax.swing.JButton();
        botonSusIngredientes = new javax.swing.JButton();
        botonSusRecetasDependientes = new javax.swing.JButton();
        botonSusRecetasPendientes = new javax.swing.JButton();
        botonAgregar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        jLabel1.setText("LISTADO DE LOS REGISTROS");

        tablaRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaRegistros);

        jLabel2.setText("BUSCAR POR NOMBRE:");

        buscador1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                buscador1KeyReleased(evt);
            }
        });

        filtroComidas.setText("COMIDAS");
        filtroComidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroComidasActionPerformed(evt);
            }
        });

        filtroClientes.setText("CLIENTES");
        filtroClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroClientesActionPerformed(evt);
            }
        });

        filtroIngredientes.setText("INGREDIENTES");
        filtroIngredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroIngredientesActionPerformed(evt);
            }
        });

        filtroPedidos.setText("PEDIDOS");
        filtroPedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroPedidosActionPerformed(evt);
            }
        });

        filtroRecetas.setText("RECETAS");
        filtroRecetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroRecetasActionPerformed(evt);
            }
        });

        jLabel3.setText("BUSCAR POR ID:");

        buscador2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                buscador2KeyReleased(evt);
            }
        });

        filtroSecciones.setText("SECCIONES");
        filtroSecciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroSeccionesActionPerformed(evt);
            }
        });

        botonSusComidas.setText("SUS COMIDAS");
        botonSusComidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSusComidasActionPerformed(evt);
            }
        });

        botonSusIngredientes.setText("SUS INGREDIENTES");
        botonSusIngredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSusIngredientesActionPerformed(evt);
            }
        });

        botonSusRecetasDependientes.setText("SUS RECETAS DEPENDIENTES");
        botonSusRecetasDependientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSusRecetasDependientesActionPerformed(evt);
            }
        });

        botonSusRecetasPendientes.setText("SUS RECETAS PENDIENTES");
        botonSusRecetasPendientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSusRecetasPendientesActionPerformed(evt);
            }
        });

        botonAgregar.setText("AGREGAR");
        botonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarActionPerformed(evt);
            }
        });

        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(buscador1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(filtroComidas, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(filtroClientes, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(filtroIngredientes, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(filtroPedidos, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(filtroRecetas, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(buscador2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(filtroSecciones, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(botonSusComidas, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(botonSusIngredientes, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(botonSusRecetasDependientes, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(botonSusRecetasPendientes, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(botonAgregar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(409, 409, 409))
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                                    .addComponent(filtroComidas)
                                    .addGap(29, 29, 29)))
                            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addComponent(filtroClientes)
                                    .addGap(30, 30, 30)
                                    .addComponent(filtroIngredientes)
                                    .addGap(28, 28, 28)
                                    .addComponent(filtroPedidos)
                                    .addGap(28, 28, 28)
                                    .addComponent(filtroRecetas))
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addComponent(buscador1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3)))
                            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(buscador2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                    .addGap(28, 28, 28)
                                    .addComponent(filtroSecciones)))))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(botonSusComidas)
                        .addGap(30, 30, 30)
                        .addComponent(botonSusIngredientes)
                        .addGap(34, 34, 34)
                        .addComponent(botonSusRecetasDependientes)
                        .addGap(18, 18, 18)
                        .addComponent(botonSusRecetasPendientes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonAgregar)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(buscador1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(buscador2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filtroComidas)
                    .addComponent(filtroClientes)
                    .addComponent(filtroIngredientes)
                    .addComponent(filtroPedidos)
                    .addComponent(filtroRecetas)
                    .addComponent(filtroSecciones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonSusComidas)
                    .addComponent(botonSusIngredientes)
                    .addComponent(botonSusRecetasDependientes)
                    .addComponent(botonSusRecetasPendientes)
                    .addComponent(botonAgregar))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscador1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscador1KeyReleased
        // TODO add your handling code here:
        if(filtroComidas.isSelected()){
            borrarFilas();
            for (Comida comida : logicaTabla.loadComidas()) {
                if(comida.getNombre().toUpperCase().startsWith(buscador1.getText().toUpperCase())){
                    Object[] fila = new Object[]{
                        comida.getNombre(),
                        comida.getReceta(),
                        comida.getPrecio()
                    };
                    modeloComidas.addRow(fila);
                }
            }
        }else if(filtroClientes.isSelected()){
            borrarFilas();
            for (Cliente cliente : logicaTabla.loadClientes()) {
                if(cliente.getNombre().toUpperCase().startsWith(buscador1.getText().toUpperCase())){
                    Object[] fila1 = new Object[]{
                        cliente.getId(),
                        cliente.getNombre(),
                        cliente.getDireccion()
                    };
                    modeloClientes.addRow(fila1);
                }
            }
        }else if(filtroIngredientes.isSelected()){
            borrarFilas();
            for (Ingrediente ingrediente : logicaTabla.loadIngredientes()) {
                if(ingrediente.getNombre().toUpperCase().startsWith(buscador1.getText().toUpperCase())){
                    Object[] fila2 = new Object[]{
                        ingrediente.getNombre(),
                        ingrediente.getCosto(),
                        ingrediente.getCantidadEnStock()
                    };
                    modeloIngredientes.addRow(fila2);
                }
            }
        }else if(filtroRecetas.isSelected()){
            borrarFilas();
            for (Receta receta : logicaTabla.loadRecetas()) {
                if(receta.getNombre().toUpperCase().startsWith(buscador1.getText().toUpperCase())){
                    Object[] fila3 = new Object[]{
                        receta.getNombre(),
                        receta.getTiempoCoccion(),
                        receta.getTipo(),
                        receta.getComplejidad()
                    };
                    modeloRecetas.addRow(fila3);
                }
            }
        }else if(filtroSecciones.isSelected()){
            borrarFilas();
            for (SeccionCocina seccion : logicaTabla.loadSeccionesCocinas()) {
                if(seccion.getNombre().toUpperCase().startsWith(buscador1.getText().toUpperCase())){
                    Object[] fila4 = new Object[]{
                        seccion.getNombre(),
                        seccion.getPolitica().obtenerNombre()
                    };
                    modeloSecciones.addRow(fila4);
                }
            }
        }else if(susComidas != null){
            borrarFilas();
            for (Comida comida : susComidas) {
                if(comida.getNombre().toUpperCase().startsWith(buscador1.getText().toUpperCase())){
                    Object[] fila = new Object[]{
                        comida.getNombre(),
                        comida.getReceta(),
                        comida.getPrecio()
                    };
                    modeloComidas.addRow(fila);
                }
            }
        }else if(susIngredientes != null){
            borrarFilas();
            for (Ingrediente ingrediente : susIngredientes) {
                if(ingrediente.getNombre().toUpperCase().startsWith(buscador1.getText().toUpperCase())){
                    Object[] fila2 = new Object[]{
                        ingrediente.getNombre(),
                        ingrediente.getCosto(),
                        ingrediente.getCantidadEnStock()
                    };
                    modeloIngredientes.addRow(fila2);
                }
            }
        }else if(susRecetasDependientes!=null){
            borrarFilas();
            for (Receta receta : susRecetasDependientes) {
                if(receta.getNombre().toUpperCase().startsWith(buscador1.getText().toUpperCase())){
                    Object[] fila3 = new Object[]{
                        receta.getNombre(),
                        receta.getTiempoCoccion(),
                        receta.getTipo(),
                        receta.getComplejidad()
                    };
                    modeloRecetas.addRow(fila3);
                }
            }
        }else if(susRecetasPendientes != null){
            borrarFilas();
            for (Receta receta : susRecetasPendientes) {
                if(receta.getNombre().toUpperCase().startsWith(buscador1.getText().toUpperCase())){
                    Object[] fila3 = new Object[]{
                        receta.getNombre(),
                        receta.getTiempoCoccion(),
                        receta.getTipo(),
                        receta.getComplejidad()
                    };
                    modeloRecetas.addRow(fila3);
                }
            }
        }
        
    }//GEN-LAST:event_buscador1KeyReleased

    private void filtroComidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroComidasActionPerformed
        // TODO add your handling code here:
        filtroClientes.setSelected(false);
        filtroIngredientes.setSelected(false);
        filtroPedidos.setSelected(false);
        filtroRecetas.setSelected(false);
        filtroSecciones.setSelected(false);
        buscador1.setEditable(true);
        buscador1.setBackground(Color.WHITE);
        botonSusComidas.setEnabled(false);
        botonSusIngredientes.setEnabled(false);
        botonSusRecetasDependientes.setEnabled(false);
        botonSusRecetasPendientes.setEnabled(false);
        botonAgregar.setEnabled(true);
        borrarFilas();
        armarCabeceraComidas();
    }//GEN-LAST:event_filtroComidasActionPerformed

    private void filtroClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroClientesActionPerformed
        // TODO add your handling code here:
        filtroComidas.setSelected(false);
        filtroIngredientes.setSelected(false);
        filtroPedidos.setSelected(false);
        filtroRecetas.setSelected(false);
        filtroSecciones.setSelected(false);
        buscador1.setEditable(true);
        buscador1.setBackground(Color.WHITE);
        botonSusComidas.setEnabled(false);
        botonSusIngredientes.setEnabled(false);
        botonSusRecetasDependientes.setEnabled(false);
        botonSusRecetasPendientes.setEnabled(false);
        botonAgregar.setEnabled(false);
        borrarFilas();
        armarCabeceraClientes();
    }//GEN-LAST:event_filtroClientesActionPerformed

    private void filtroIngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroIngredientesActionPerformed
        // TODO add your handling code here:
        filtroComidas.setSelected(false);
        filtroClientes.setSelected(false);
        filtroPedidos.setSelected(false);
        filtroRecetas.setSelected(false);
        filtroSecciones.setSelected(false);
        buscador1.setEditable(true);
        buscador1.setBackground(Color.WHITE);
        botonSusComidas.setEnabled(false);
        botonSusIngredientes.setEnabled(false);
        botonSusRecetasDependientes.setEnabled(false);
        botonSusRecetasPendientes.setEnabled(false);
        botonAgregar.setEnabled(true);
        borrarFilas();
        armarCabeceraIngredientes();
    }//GEN-LAST:event_filtroIngredientesActionPerformed

    private void filtroPedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroPedidosActionPerformed
        // TODO add your handling code here:
        filtroComidas.setSelected(false);
        filtroClientes.setSelected(false);
        filtroIngredientes.setSelected(false);
        filtroRecetas.setSelected(false);
        filtroSecciones.setSelected(false);
        buscador1.setEditable(false);
        buscador1.setBackground(Color.LIGHT_GRAY);
        botonSusComidas.setEnabled(true);
        botonSusIngredientes.setEnabled(false);
        botonSusRecetasDependientes.setEnabled(false);
        botonSusRecetasPendientes.setEnabled(false);
        botonAgregar.setEnabled(false);
        borrarFilas();
        armarCabeceraPedidos();
    }//GEN-LAST:event_filtroPedidosActionPerformed

    private void filtroRecetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroRecetasActionPerformed
        // TODO add your handling code here:
        filtroComidas.setSelected(false);
        filtroClientes.setSelected(false);
        filtroIngredientes.setSelected(false);
        filtroPedidos.setSelected(false);
        filtroSecciones.setSelected(false);
        buscador1.setEditable(true);
        buscador1.setBackground(Color.WHITE);
        botonSusComidas.setEnabled(false);
        botonSusIngredientes.setEnabled(true);
        botonSusRecetasDependientes.setEnabled(true);
        botonSusRecetasPendientes.setEnabled(false);
        botonAgregar.setEnabled(true);
        borrarFilas();
        armarCabeceraRecetas();
        
    }//GEN-LAST:event_filtroRecetasActionPerformed

    private void filtroSeccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroSeccionesActionPerformed
        // TODO add your handling code here:
        filtroComidas.setSelected(false);
        filtroClientes.setSelected(false);
        filtroIngredientes.setSelected(false);
        filtroPedidos.setSelected(false);
        filtroRecetas.setSelected(false);
        buscador1.setEditable(true);
        buscador1.setBackground(Color.WHITE);
        botonSusComidas.setEnabled(false);
        botonSusIngredientes.setEnabled(true);
        botonSusRecetasDependientes.setEnabled(false);
        botonSusRecetasPendientes.setEnabled(true);
        botonAgregar.setEnabled(false);
        borrarFilas();
        armarCabeceraSecciones();
    }//GEN-LAST:event_filtroSeccionesActionPerformed

    private void buscador2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscador2KeyReleased
        // TODO add your handling code here:
        if(filtroPedidos.isSelected()){
            borrarFilas();
            for (Pedido pedido : logicaTabla.loadPedidos()) {
                if(String.valueOf(pedido.getCliente().getId()).toUpperCase().startsWith(buscador2.getText().toUpperCase())){
                    Object[] fila5 = new Object[]{
                        pedido.getCliente().getId(),
                        pedido.getCliente().getNombre(),
                        pedido.getPrecio(),
                        pedido.getPrecio()
                    };
                    modeloPedidos.addRow(fila5);
                }
            }
        }
    }//GEN-LAST:event_buscador2KeyReleased

    private void botonSusComidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSusComidasActionPerformed
        // TODO add your handling code here:
        Pedido pedido1;
        int filaSelecionada = tablaRegistros.getSelectedRow();
        if(filaSelecionada != -1){
                
            int id = Integer.parseInt(tablaRegistros.getValueAt(filaSelecionada, 0).toString());
            pedido1 = logicaTabla.obtenerPedido(id);
            ListadoVista lr = new ListadoVista(logicaTabla);
            lr.setVisible(true);
            CasaDeComidasVista.obtenerEscritorio().add(lr);
            int x = (CasaDeComidasVista.obtenerEscritorio().getWidth() - lr.getWidth()) / 2;
            int y = (CasaDeComidasVista.obtenerEscritorio().getHeight() - lr.getHeight()) / 2;
            lr.setLocation(x, y);
            CasaDeComidasVista.obtenerEscritorio().moveToFront(lr);
            lr.addInternalFrameListener(new InternalFrameListener() {
                @Override
                public void internalFrameOpened(InternalFrameEvent e) {
                    // Este método se llama cuando se abre el JInternalFrame
                    lr.botonSusComidas.setEnabled(false);
                    lr.botonSusIngredientes.setEnabled(false);
                    lr.botonSusRecetasDependientes.setEnabled(false);
                    lr.botonSusRecetasPendientes.setEnabled(false);
                    lr.botonAgregar.setEnabled(false);
                    lr.susComidas = pedido1.getComidas();

                }

                @Override
                public void internalFrameClosing(InternalFrameEvent e) {
                    // Este método se llama cuando se cierra el JInternalFrame


                    // Realiza aquí las acciones que deseas cuando se cierra
                    // por ejemplo, actualizaciones o notificaciones.
                }

                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    // Este método se llama después de que el JInternalFrame se haya cerrado
                }

                @Override
                public void internalFrameIconified(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se minimiza
                }

                @Override
                public void internalFrameDeiconified(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se restaura desde la minimización
                }

                @Override
                public void internalFrameActivated(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se activa (gana el foco)
                }

                @Override
                public void internalFrameDeactivated(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se desactiva (pierde el foco)
                }
            });
            
        }else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila de la tabla.");
        }
        
    }//GEN-LAST:event_botonSusComidasActionPerformed

    private void botonSusIngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSusIngredientesActionPerformed
        // TODO add your handling code here:
        if(filtroRecetas.isSelected()){
            Receta receta1;
            int filaSelecionada = tablaRegistros.getSelectedRow();
            if(filaSelecionada != -1){

                String nombre = tablaRegistros.getValueAt(filaSelecionada, 0).toString();
                receta1 = logicaTabla.obtenerReceta(nombre);
                ListadoVista lr = new ListadoVista(logicaTabla);
                lr.setVisible(true);
                CasaDeComidasVista.obtenerEscritorio().add(lr);
                int x = (CasaDeComidasVista.obtenerEscritorio().getWidth() - lr.getWidth()) / 2;
                int y = (CasaDeComidasVista.obtenerEscritorio().getHeight() - lr.getHeight()) / 2;
                lr.setLocation(x, y);
                CasaDeComidasVista.obtenerEscritorio().moveToFront(lr);
                lr.addInternalFrameListener(new InternalFrameListener() {
                    @Override
                    public void internalFrameOpened(InternalFrameEvent e) {
                        // Este método se llama cuando se abre el JInternalFrame
                        lr.botonSusComidas.setEnabled(false);
                        lr.botonSusIngredientes.setEnabled(false);
                        lr.botonSusRecetasDependientes.setEnabled(false);
                        lr.botonSusRecetasPendientes.setEnabled(false);
                        lr.botonAgregar.setEnabled(false);
                        lr.susIngredientes = receta1.getIngredientes();

                    }

                    @Override
                    public void internalFrameClosing(InternalFrameEvent e) {
                        // Este método se llama cuando se cierra el JInternalFrame


                        // Realiza aquí las acciones que deseas cuando se cierra
                        // por ejemplo, actualizaciones o notificaciones.
                    }

                    @Override
                    public void internalFrameClosed(InternalFrameEvent e) {
                        // Este método se llama después de que el JInternalFrame se haya cerrado
                    }

                    @Override
                    public void internalFrameIconified(InternalFrameEvent e) {
                        // Este método se llama cuando el JInternalFrame se minimiza
                    }

                    @Override
                    public void internalFrameDeiconified(InternalFrameEvent e) {
                        // Este método se llama cuando el JInternalFrame se restaura desde la minimización
                    }

                    @Override
                    public void internalFrameActivated(InternalFrameEvent e) {
                        // Este método se llama cuando el JInternalFrame se activa (gana el foco)
                    }

                    @Override
                    public void internalFrameDeactivated(InternalFrameEvent e) {
                        // Este método se llama cuando el JInternalFrame se desactiva (pierde el foco)
                    }
                });

            }else {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila de la tabla.");
            }
        }else if (filtroSecciones.isSelected()){
            SeccionCocina seccion1;
            int filaSelecionada = tablaRegistros.getSelectedRow();
            if(filaSelecionada != -1){

                String nombre = tablaRegistros.getValueAt(filaSelecionada, 0).toString();
                seccion1 = logicaTabla.obtenerSeccion(nombre);
                ListadoVista lr = new ListadoVista(logicaTabla);
                lr.setVisible(true);
                CasaDeComidasVista.obtenerEscritorio().add(lr);
                int x = (CasaDeComidasVista.obtenerEscritorio().getWidth() - lr.getWidth()) / 2;
                int y = (CasaDeComidasVista.obtenerEscritorio().getHeight() - lr.getHeight()) / 2;
                lr.setLocation(x, y);
                CasaDeComidasVista.obtenerEscritorio().moveToFront(lr);
                lr.addInternalFrameListener(new InternalFrameListener() {
                    @Override
                    public void internalFrameOpened(InternalFrameEvent e) {
                        // Este método se llama cuando se abre el JInternalFrame
                        lr.botonSusComidas.setEnabled(false);
                        lr.botonSusIngredientes.setEnabled(false);
                        lr.botonSusRecetasDependientes.setEnabled(false);
                        lr.botonSusRecetasPendientes.setEnabled(false);
                        lr.botonAgregar.setEnabled(false);
                        lr.susIngredientes = seccion1.getIngredientes().getIngredientes();

                    }

                    @Override
                    public void internalFrameClosing(InternalFrameEvent e) {
                        // Este método se llama cuando se cierra el JInternalFrame


                        // Realiza aquí las acciones que deseas cuando se cierra
                        // por ejemplo, actualizaciones o notificaciones.
                    }

                    @Override
                    public void internalFrameClosed(InternalFrameEvent e) {
                        // Este método se llama después de que el JInternalFrame se haya cerrado
                    }

                    @Override
                    public void internalFrameIconified(InternalFrameEvent e) {
                        // Este método se llama cuando el JInternalFrame se minimiza
                    }

                    @Override
                    public void internalFrameDeiconified(InternalFrameEvent e) {
                        // Este método se llama cuando el JInternalFrame se restaura desde la minimización
                    }

                    @Override
                    public void internalFrameActivated(InternalFrameEvent e) {
                        // Este método se llama cuando el JInternalFrame se activa (gana el foco)
                    }

                    @Override
                    public void internalFrameDeactivated(InternalFrameEvent e) {
                        // Este método se llama cuando el JInternalFrame se desactiva (pierde el foco)
                    }
                });

            }else {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila de la tabla.");
            }
        }
    }//GEN-LAST:event_botonSusIngredientesActionPerformed

    private void botonSusRecetasDependientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSusRecetasDependientesActionPerformed
        // TODO add your handling code here:
        Receta receta1;
        int filaSelecionada = tablaRegistros.getSelectedRow();
        if(filaSelecionada != -1){
                
            String nombre = tablaRegistros.getValueAt(filaSelecionada, 0).toString();
            receta1 = logicaTabla.obtenerReceta(nombre);
            ListadoVista lr = new ListadoVista(logicaTabla);
            lr.setVisible(true);
            CasaDeComidasVista.obtenerEscritorio().add(lr);
            int x = (CasaDeComidasVista.obtenerEscritorio().getWidth() - lr.getWidth()) / 2;
            int y = (CasaDeComidasVista.obtenerEscritorio().getHeight() - lr.getHeight()) / 2;
            lr.setLocation(x, y);
            CasaDeComidasVista.obtenerEscritorio().moveToFront(lr);
            lr.addInternalFrameListener(new InternalFrameListener() {
                @Override
                public void internalFrameOpened(InternalFrameEvent e) {
                    // Este método se llama cuando se abre el JInternalFrame
                    lr.botonSusComidas.setEnabled(false);
                    lr.botonSusIngredientes.setEnabled(false);
                    lr.botonSusRecetasDependientes.setEnabled(false);
                    lr.botonSusRecetasPendientes.setEnabled(false);
                    lr.botonAgregar.setEnabled(false);
                    lr.susRecetasDependientes = receta1.getRecetasDependientes();

                }

                @Override
                public void internalFrameClosing(InternalFrameEvent e) {
                    // Este método se llama cuando se cierra el JInternalFrame


                    // Realiza aquí las acciones que deseas cuando se cierra
                    // por ejemplo, actualizaciones o notificaciones.
                }

                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    // Este método se llama después de que el JInternalFrame se haya cerrado
                }

                @Override
                public void internalFrameIconified(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se minimiza
                }

                @Override
                public void internalFrameDeiconified(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se restaura desde la minimización
                }

                @Override
                public void internalFrameActivated(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se activa (gana el foco)
                }

                @Override
                public void internalFrameDeactivated(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se desactiva (pierde el foco)
                }
            });
            
        }else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila de la tabla.");
        }
    }//GEN-LAST:event_botonSusRecetasDependientesActionPerformed

    private void botonSusRecetasPendientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSusRecetasPendientesActionPerformed
        // TODO add your handling code here:
        SeccionCocina seccion1;
        int filaSelecionada = tablaRegistros.getSelectedRow();
        if(filaSelecionada != -1){

            String nombre = tablaRegistros.getValueAt(filaSelecionada, 0).toString();
            seccion1 = logicaTabla.obtenerSeccion(nombre);
            ListadoVista lr = new ListadoVista(logicaTabla);
            lr.setVisible(true);
            CasaDeComidasVista.obtenerEscritorio().add(lr);
            int x = (CasaDeComidasVista.obtenerEscritorio().getWidth() - lr.getWidth()) / 2;
            int y = (CasaDeComidasVista.obtenerEscritorio().getHeight() - lr.getHeight()) / 2;
            lr.setLocation(x, y);
            CasaDeComidasVista.obtenerEscritorio().moveToFront(lr);
            lr.addInternalFrameListener(new InternalFrameListener() {
                @Override
                public void internalFrameOpened(InternalFrameEvent e) {
                    // Este método se llama cuando se abre el JInternalFrame
                    lr.botonSusComidas.setEnabled(false);
                    lr.botonSusIngredientes.setEnabled(false);
                    lr.botonSusRecetasDependientes.setEnabled(false);
                    lr.botonSusRecetasPendientes.setEnabled(false);
                    lr.botonAgregar.setEnabled(false);
                    lr.susRecetasPendientes = seccion1.getRecetasPendientes();

                }

                @Override
                public void internalFrameClosing(InternalFrameEvent e) {
                    // Este método se llama cuando se cierra el JInternalFrame


                    // Realiza aquí las acciones que deseas cuando se cierra
                    // por ejemplo, actualizaciones o notificaciones.
                }

                @Override
                public void internalFrameClosed(InternalFrameEvent e) {
                    // Este método se llama después de que el JInternalFrame se haya cerrado
                }

                @Override
                public void internalFrameIconified(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se minimiza
                }

                @Override
                public void internalFrameDeiconified(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se restaura desde la minimización
                }

                @Override
                public void internalFrameActivated(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se activa (gana el foco)
                }

                @Override
                public void internalFrameDeactivated(InternalFrameEvent e) {
                    // Este método se llama cuando el JInternalFrame se desactiva (pierde el foco)
                }
            });

        }else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila de la tabla.");
        }
    }//GEN-LAST:event_botonSusRecetasPendientesActionPerformed

    private void botonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarActionPerformed
        // TODO add your handling code here:
        Comida comida1;
        Receta receta1;
        Ingrediente ingrediente1;
        int filaSelecionada = tablaRegistros.getSelectedRow();
        if(filaSelecionada != -1){
            if(filtroComidas.isSelected()){
                String nombre = tablaRegistros.getValueAt(filaSelecionada, 0).toString();
                comida1 = logicaTabla.obtenerComida(nombre);
                agregarComidas.add(comida1);
            }else if(filtroRecetas.isSelected()){
                String nombre = tablaRegistros.getValueAt(filaSelecionada, 0).toString();
                receta1 = logicaTabla.obtenerReceta(nombre);
                agregarUnaReceta = receta1;
                agregarRecetas.add(receta1);
            }else if(filtroIngredientes.isSelected()){
                String nombre = tablaRegistros.getValueAt(filaSelecionada, 0).toString();
                ingrediente1 = logicaTabla.obtenerIngrediente(nombre);
                agregarIngredientes.add(ingrediente1);
            }
        }else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila de la tabla.");
        }
    }//GEN-LAST:event_botonAgregarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton botonAgregar;
    protected javax.swing.JButton botonSusComidas;
    protected javax.swing.JButton botonSusIngredientes;
    protected javax.swing.JButton botonSusRecetasDependientes;
    protected javax.swing.JButton botonSusRecetasPendientes;
    protected javax.swing.JTextField buscador1;
    protected javax.swing.JTextField buscador2;
    protected javax.swing.JRadioButton filtroClientes;
    protected javax.swing.JRadioButton filtroComidas;
    protected javax.swing.JRadioButton filtroIngredientes;
    protected javax.swing.JRadioButton filtroPedidos;
    protected javax.swing.JRadioButton filtroRecetas;
    protected javax.swing.JRadioButton filtroSecciones;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JTable tablaRegistros;
    // End of variables declaration//GEN-END:variables
    private void borrarFilas() {
        DefaultTableModel model = (DefaultTableModel) tablaRegistros.getModel();
        model.setRowCount(0); // Elimina todas las filas de la tabla
    }
    private void armarCabeceraComidas(){
        modeloComidas.setColumnCount(0);
        modeloComidas.addColumn("Nombre");
        modeloComidas.addColumn("Receta");
        modeloComidas.addColumn("Precio");
        tablaRegistros.setModel(modeloComidas);
        /*tablaRegistros.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaRegistros.getColumnModel().getColumn(0).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(1).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(2).setPreferredWidth(150);*/
    }
    private void armarCabeceraClientes(){
        modeloClientes.setColumnCount(0);
        modeloClientes.addColumn("ID");
        modeloClientes.addColumn("Nombre");
        modeloClientes.addColumn("Direccion");
        tablaRegistros.setModel(modeloClientes);
        /*tablaRegistros.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaRegistros.getColumnModel().getColumn(0).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(1).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(2).setPreferredWidth(200);*/
    }
    private void armarCabeceraIngredientes(){
        modeloIngredientes.setColumnCount(0);
        modeloIngredientes.addColumn("Nombre");
        modeloIngredientes.addColumn("Costo");
        modeloIngredientes.addColumn("Stock");
        tablaRegistros.setModel(modeloIngredientes);
        /*tablaRegistros.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaRegistros.getColumnModel().getColumn(0).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(1).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(2).setPreferredWidth(150);*/
    }
    private void armarCabeceraPedidos(){
        modeloPedidos.setColumnCount(0);
        modeloPedidos.addColumn("ID Cliente");
        modeloPedidos.addColumn("Nombre Cliente");
        //modeloPedidos.addColumn("Comidas");
        modeloPedidos.addColumn("Precio");
        modeloPedidos.addColumn("Estado");
        tablaRegistros.setModel(modeloPedidos);
        /*tablaRegistros.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaRegistros.getColumnModel().getColumn(0).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(1).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(2).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(3).setPreferredWidth(150);
        //tablaRegistros.getColumnModel().getColumn(4).setPreferredWidth(150);*/
    }
    private void armarCabeceraRecetas(){
        modeloRecetas.setColumnCount(0);
        modeloRecetas.addColumn("Nombre");
        //modeloRecetas.addColumn("Ingredientes");
        modeloRecetas.addColumn("Tiempo de Coccion");
        modeloRecetas.addColumn("Tipo");
        modeloRecetas.addColumn("Complejidad");
        //modeloRecetas.addColumn("Recetas Dependientes");
        tablaRegistros.setModel(modeloRecetas);
        /*tablaRegistros.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaRegistros.getColumnModel().getColumn(0).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(1).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(2).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(3).setPreferredWidth(150);*/
        //tablaRegistros.getColumnModel().getColumn(4).setPreferredWidth(150);
        //tablaRegistros.getColumnModel().getColumn(5).setPreferredWidth(150);
    }
    private void armarCabeceraSecciones(){
        modeloSecciones.setColumnCount(0);
        modeloSecciones.addColumn("Nombre");
        modeloSecciones.addColumn("Politica");
        //modeloSecciones.addColumn("Ingredientes");
        //modeloSecciones.addColumn("Recetas Pendientes");
        tablaRegistros.setModel(modeloSecciones);
        /*tablaRegistros.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaRegistros.getColumnModel().getColumn(0).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(1).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(2).setPreferredWidth(150);
        tablaRegistros.getColumnModel().getColumn(3).setPreferredWidth(150);*/
    }

}
